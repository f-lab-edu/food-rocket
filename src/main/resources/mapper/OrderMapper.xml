<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hoon.foodrocket.mapper.OrderMapper">
    <!-- 주문 내역 조회 -->
<!--    주문 내역은 가게명, 비용, 주문상태, 날짜와 첫번째 주문 메뉴 그리고 메뉴 갯수를 가져옵니다.-->
<!--    ex) 후라이드 치킨 외 2개-->
<!--    각 주문에는 대응하는 주문 메뉴가 있기 때문에 INNER JOIN을 사용했고, 그룹화를 통해 주문별 첫번째 메뉴와 메뉴 갯수를 가져오도록 했습니다.-->
<!--    화면에 보여지는 데이터는 한정적이기 때문에 커서 기반 페이징을 통해 불필요하게 많은 데이터를 가져오지 않도록 했으며-->
<!--    최신 데이터가 먼저 보여지도록 날짜별로 정렬했습니다.-->
    <select id="getOrderHistoryList" resultType="com.hoon.foodrocket.domain.order.OrderHistory">
        SELECT  a.id,
                a.restaurant_name restaurantName,
                a.payment_amount paymentAmount,
                a.order_status orderStatus,
                a.reg_date regDate,
                MIN(b.name) menuName,
                COUNT(b.amount)-1 extraMenuNum
        FROM orders a INNER JOIN order_menus b ON a.id = b.order_id
        WHERE a.user_email = #{loginUserEmail}
        GROUP BY a.id
        <if test="cursorId != 0">
            HAVING a.id &lt; #{cursorId}
        </if>
        ORDER BY a.reg_date desc
        LIMIT 3
    </select>

    <!-- 주문 상세 내역 -->
<!--    상세 내역은 주문 정보와 메뉴 목록을 함께 가져옵니다.-->
<!--    이처럼 클래스 내부에 컬렉션을 담고 있는 복잡한 구문을 ResultMap으로 처리하여 한 번에 원하는 데이터를 가져오도록 했습니다.-->
    <select id="getOrderDetail" resultMap="orderDetailMap">
        SELECT  a.id orderId,
                a.phone_number phoneNumber,
                a.delivery_address deliveryAddress,
                a.restaurant_name restaurantName,
                a.request orderRequest,
                a.payment_amount paymentAmount,
                a.payment_method paymentMethod,
                a.order_status orderStatus,
                a.reg_date regDate,
                b.id orderMenuId,
                b.name orderMenuName,
                b.price orderMenuPrice,
                b.amount orderMenuAmount
        FROM orders a INNER JOIN order_menus b ON a.id = b.order_id
        WHERE a.id = #{id} AND a.user_email = #{loginUserEmail}
    </select>

    <resultMap id="orderDetailMap" type="com.hoon.foodrocket.domain.order.OrderDetail">
        <id property="id" column="orderId"/>
        <result property="phoneNumber" column="phoneNumber"/>
        <result property="deliveryAddress" column="deliveryAddress"/>
        <result property="restaurantName" column="restaurantName"/>
        <result property="request" column="orderRequest"/>
        <result property="paymentAmount" column="paymentAmount"/>
        <result property="paymentMethod" column="paymentMethod"/>
        <result property="orderStatus" column="orderStatus"/>
        <result property="regDate" column="regDate"/>
        <collection property="orderMenuList" ofType="com.hoon.foodrocket.domain.order.OrderMenu">
            <id property="id" column="orderMenuId"/>
            <result property="name" column="orderMenuName"/>
            <result property="price" column="orderMenuPrice"/>
            <result property="amount" column="orderMenuAmount"/>
        </collection>
    </resultMap>

    <!-- 주문 등록 -->
    <insert id="insertOrder" parameterType="com.hoon.foodrocket.domain.order.Order">
        insert into orders (
            user_email,
            phone_number,
            delivery_address,
            restaurant_name,
            request,
            payment_amount,
            payment_method,
            reg_date
        )
        values (
            #{userEmail},
            #{phoneNumber},
            #{deliveryAddress},
            #{restaurantName},
            #{request},
            #{paymentAmount},
            #{paymentMethod},
            now()
        )
        <selectKey keyProperty="id" resultType="long">
            select last_insert_id() as id
        </selectKey>
    </insert>

    <!-- 주문 메뉴 등록 -->
    <insert id="insertOrderMenus">
        insert into order_menus (
            name,
            price,
            amount,
            order_id
        )
        values
        <foreach item="item" index="index" collection="cartItemList" separator=",">
            (
                #{item.name},
                #{item.price},
                #{item.amount},
                #{orderId}
            )
        </foreach>
    </insert>

    <!-- 주문 상태 수정 -->
    <update id="updateOrderStatus">
        update orders
        set order_status = #{orderStatus}
        where id = #{id}
    </update>
</mapper>